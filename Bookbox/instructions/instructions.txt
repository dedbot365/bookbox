{SCENARIO 
A private book library store aims to expand its reach by retailing books online. The 
system will offer a catalog of books that users can browse and purchase. Users will be 
able to filter the catalog by criteria such as author, genre, availability (stock and physical 
library access), price range, ratings, language, and format (e.g., paperback, hardcover, 
exclusive editions like signed, limited, first, collector’s, author’s, deluxe, etc.). Additional 
filters include publishers, and users can search for books by title, ISBN, or description. 
Sorting options will allow users to organize books by title, publication date, price, or 
popularity (most sold). 
The platform will feature tabs for categories like All Books, Bestsellers, Award Winners, 
New Releases (published in the past three months), New Arrivals (listed in the past 
month), Coming Soon, and Deals (discounts and sales). 
Registered users, referred to as members, can bookmark books (whitelist) and view 
availability status, add books to their cart, and place cancelable orders. Currently, the 
store only offers in-store pickup. After placing an order, members will receive a 
confirmation email with a claim code and the bill. To complete the purchase, members 
must present their membership ID and claim code at the store, where staff will process 
the order through their portal. 
The system also includes a discount mechanism: an order of five or more books receives 
a 5% discount, and after every 10 successful orders, the member earns a 10% stackable 
discount on their next order. 
After purchasing, members can leave reviews as ratings and comments on books. 
Administrators have full control over the catalog, including the ability to create, update, 
and delete books and manage inventory. They can also add discounts to individual 
books, optionally flagging them as "On Sale" and setting discount periods. Admins can 
create timed announcements for deals, new arrivals, or other informational messages. 
}


---

What I Want?

Answer:
I want to allow members to leave reviews (ratings and comments) for books they have **successfully purchased**. A purchase is only valid if the order has been **marked as Completed** by the staff (i.e., after claim code has been redeemed, the status is amrked as completed). These completed purchases should appear in a **Purchased Books** page, accessible from the user profile. Users can then write and submit reviews for each book they’ve purchased.

---

 How Would I Solve This Problem?

Answer:

* Filter and display only **Completed Orders** (Status ID = 2) under a new section or page called **Purchased Books**.
*  reuse a model (`Review.cs`) that contains fields like: `BookId`, `UserId`, `Rating`, `Comment' .
* Create DTOs as needed (e.g., `ReviewDTO`, `PurchasedBookDTO`) to pass data to the view layer.
* Build a `ReviewService` and `IReviewService` to manage:

  * Adding a review.
  * Preventing multiple reviews for the same book by the same user.
* In the **Purchased Books View**, display:

  * Book details (title, cover, author).
  * If not reviewed: a **form to submit a review** (rating star upto 5, comment textbox which is optional).
  * If already reviewed: show the **existing rating and comment** with an option to **edit** (optional).
* Ensure the member is only allowed to post reviews for books from **orders with Completed status**.
* The `Purchased Books` page can be linked in the **user profile dropdown** below '  My Orders' .

---

What I Expect You to Solve It?

**Answer:**

* Help me create a **Purchased Books page** that displays only books from **Completed Orders**.
* Guide me to:

  * Show a review form (rating and comment) next to each eligible book.
  * Save the review using a controller and service logic.
  * Validate that the user can review a book only once per order.
* Ensure the **view is clean**, with proper UI/UX distinction between reviewed and not-yet-reviewed books.
* Show how to structure the folder placement for the new files (e.g., Review DTOs, Service, Controller, View).
* Make sure the review logic checks that the book is from a **Completed order only** (Status ID = 2).

---

What’s Been Done?

**Answer:**
* Review. cs is already created
* **Completed orders** are correctly marked once staff redeems the **claim code**.
* Status of such orders is set to **Completed (2)** in the system.
* This status logic is already working as expected.
* Now I want to create a new page for **Purchased Books** where members can:

  * View only the books from **completed orders**, and
  * Add **rating and comment** as a review for each of them.

---
(So far, review.cs model has been created , and the Dto file)
1. Create the interface and the servie to implement



