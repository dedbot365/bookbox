{SCENARIO 
A private book library store aims to expand its reach by retailing books online. The 
system will offer a catalog of books that users can browse and purchase. Users will be 
able to filter the catalog by criteria such as author, genre, availability (stock and physical 
library access), price range, ratings, language, and format (e.g., paperback, hardcover, 
exclusive editions like signed, limited, first, collector’s, author’s, deluxe, etc.). Additional 
filters include publishers, and users can search for books by title, ISBN, or description. 
Sorting options will allow users to organize books by title, publication date, price, or 
popularity (most sold). 
The platform will feature tabs for categories like All Books, Bestsellers, Award Winners, 
New Releases (published in the past three months), New Arrivals (listed in the past 
month), Coming Soon, and Deals (discounts and sales). 
Registered users, referred to as members, can bookmark books (whitelist) and view 
availability status, add books to their cart, and place cancelable orders. Currently, the 
store only offers in-store pickup. After placing an order, members will receive a 
confirmation email with a claim code and the bill. To complete the purchase, members 
must present their membership ID and claim code at the store, where staff will process 
the order through their portal. 
The system also includes a discount mechanism: an order of five or more books receives 
a 5% discount, and after every 10 successful orders, the member earns a 10% stackable 
discount on their next order. 
After purchasing, members can leave reviews as ratings and comments on books. 
Administrators have full control over the catalog, including the ability to create, update, 
and delete books and manage inventory. They can also add discounts to individual 
books, optionally flagging them as "On Sale" and setting discount periods. Admins can 
create timed announcements for deals, new arrivals, or other informational messages. 
}
this the whole scenario now we are working on making the checkout feature. upon clicking  to 'proceed to checkout' button on the 'cart'page . it should go to the checkout page (the table of order attributes , st the values which arent there as 0 , will be worked later ) and in that page there should be a button to confirm order( it works from the orderstatus.cs model , add the status pending =1 , completed =2 and cancelled =3)

 What I Want?
Answer:
I want to implement the Checkout page where users can review the books they’ve added to their cart, see the calculated totals, discounts (if applicable), and proceed to confirm the checkout. This is the final step before creating the Order.

✅ How Would I Solve This Problem?
Answer:

Create necessary DTOs (e.g., CheckoutDTO to transfer the cart and pricing data.

Implement a CheckoutService and corresponding ICheckoutService interface to calculate total books, subtotal.

Use CheckoutController to handle the display of the checkout summary and confirm action.

Upon confirmation,  to a success page (for now, don’t create the order yet).

Update the view to show: book titles, prices, quantity, subtotal, discount, final total, and a button to confirm checkout.

Make sure the service pulls data from the cart  and returns the calculated values cleanly.

Claim code can be generated using Guid.NewGuid().ToString().Substring(0,8).ToUpper(); and stored for now only in TempData or ViewBag.

All files created should follow the layered architecture: DTOs in DTO folder, services in Services, interfaces in Interfaces, and view in Views/Checkout.

✅ What I Expect You to Solve It?
Answer:

I want you to guide me step-by-step on what DTOs, services, and controller actions need to be created for the checkout logic.

Help me connect the checkout data with the cart data already in place.

I expect no order to be created yet—just a temporary confirmation of checkout.

Ensure the discount logic is applied correctly and that a dummy claim code is generated on confirmation.

Provide guidance on where to place each new file or update existing files if necessary.


1.(ignore this) first create a checkoutdto file
2. (ignore this)Create a interface forl the checkout and implement it in the service

3.(ignore this) Create a CheckoutController

4. Create view 
