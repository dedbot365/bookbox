{SCENARIO 
A private book library store aims to expand its reach by retailing books online. The 
system will offer a catalog of books that users can browse and purchase. Users will be 
able to filter the catalog by criteria such as author, genre, availability (stock and physical 
library access), price range, ratings, language, and format (e.g., paperback, hardcover, 
exclusive editions like signed, limited, first, collector’s, author’s, deluxe, etc.). Additional 
filters include publishers, and users can search for books by title, ISBN, or description. 
Sorting options will allow users to organize books by title, publication date, price, or 
popularity (most sold). 
The platform will feature tabs for categories like All Books, Bestsellers, Award Winners, 
New Releases (published in the past three months), New Arrivals (listed in the past 
month), Coming Soon, and Deals (discounts and sales). 
Registered users, referred to as members, can bookmark books (whitelist) and view 
availability status, add books to their cart, and place cancelable orders. Currently, the 
store only offers in-store pickup. After placing an order, members will receive a 
confirmation email with a claim code and the bill. To complete the purchase, members 
must present their membership ID and claim code at the store, where staff will process 
the order through their portal. 
The system also includes a discount mechanism: an order of five or more books receives 
a 5% discount, and after every 10 successful orders, the member earns a 10% stackable 
discount on their next order. 
After purchasing, members can leave reviews as ratings and comments on books. 
Administrators have full control over the catalog, including the ability to create, update, 
and delete books and manage inventory. They can also add discounts to individual 
books, optionally flagging them as "On Sale" and setting discount periods. Admins can 
create timed announcements for deals, new arrivals, or other informational messages. 
}


---

What I want?
Answer:
I want to implement a 10% stackable discount feature for members. After every 10 successful orders, the next (11th, 22nd, 33rd, etc.) successful order should automatically receive a one-time 10% discount, which can be stacked on top of any existing discounts. No changes should be made to the database schema.

How would I solve this problem?
Answer:

    Count the total number of successful orders for the member (e.g., those with Status == "Success").

    If the next order being placed will be the 11th, 22nd, 33rd, etc. (i.e., if successfulOrderCount + 1 is divisible by 11), then:

        Apply the 10% discount at checkout.

        No need to mark or reset anything in the database — the logic is based purely on modulo arithmetic ((orderCount + 1) % 11 == 0).

    This approach keeps things clean, avoids state tracking, and ensures consistent behavior without schema modifications.

What I expect you to solve it?
Answer:
I want you to integrate this logic into the checkout flow using the existing codebase. Specifically:

    Query the current number of successful orders for the member.

    Apply the 10% discount if the upcoming order is a multiple of 11.

    Ensure this discount stacks with any other eligible discounts (like the existing 5%).

    Do not modify the database structure — everything should be handled within code logic using existing models and queries.

What’s been done:
The 5% discount for ordering 5 or more books is already implemented.
Now, I want the 10% stackable discount to be applied on every 11th successful order 


1. Implement the logic for the 10% discount