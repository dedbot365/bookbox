@model IEnumerable<Bookbox.Models.Book>
@inject Bookbox.Services.Interfaces.IDiscountService DiscountService

@{
    ViewData["Title"] = "Shop Books - " + ViewData["CategoryName"];
    int currentPage = ViewData["CurrentPage"] != null ? Convert.ToInt32(ViewData["CurrentPage"]) : 1;
    int totalPages = ViewData["TotalPages"] != null ? Convert.ToInt32(ViewData["TotalPages"]) : 1;
    int totalItems = ViewData["TotalItems"] != null ? Convert.ToInt32(ViewData["TotalItems"]) : 0;
    
    // Create parameters for sidebar partial
    var sidebarParams = new Dictionary<string, object>
    {
        { "Controller", "Shop" },
        { "Category", ViewData["Category"] },
        { "SortBy", ViewData["SortBy"] },
        { "SearchTerm", ViewData["SearchTerm"] },
        { "SelectedGenre", ViewData["SelectedGenre"] },
        { "SelectedFormat", ViewData["SelectedFormat"] },
        { "MinPrice", ViewData["MinPrice"] },
        { "MaxPrice", ViewData["MaxPrice"] },
        { "InStock", ViewData["InStock"] }
    };
}

<div class="container-fluid mt-4 mb-5">
    <div class="row">
        <!-- Left Sidebar with Filters -->
        <div class="col-lg-3">
            <partial name="_FilterSidebar" model="sidebarParams" />
        </div>
        
        <!-- Main Content Area -->
        <div class="col-lg-9">
            <!-- Results Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">@ViewData["CategoryName"]</h1>
                    <p class="text-muted">
                        Showing @totalItems book@(totalItems != 1 ? "s" : "")
                        @if (!string.IsNullOrEmpty(ViewData["SearchTerm"]?.ToString()))
                        {
                            <span>for "<strong>@ViewData["SearchTerm"]</strong>"</span>
                        }
                    </p>
                </div>
                <div class="d-flex align-items-center">
                    <label for="sortBy" class="me-2">Sort by:</label>
                    <select id="sortBy" name="sortBy" class="form-select" style="width: auto;" onchange="updateSort(this.value)">
                        <option value="newest" selected="@(ViewData["SortBy"]?.ToString() == "newest")">Newest Arrivals</option>
                        <option value="bestselling" selected="@(ViewData["SortBy"]?.ToString() == "bestselling")">Bestselling</option>
                        <option value="title" selected="@(ViewData["SortBy"]?.ToString() == "title")">Title (A-Z)</option>
                        <option value="publication_date" selected="@(ViewData["SortBy"]?.ToString() == "publication_date")">Publication Date</option>
                        <option value="price_asc" selected="@(ViewData["SortBy"]?.ToString() == "price_asc")">Price (Low to High)</option>
                        <option value="price_desc" selected="@(ViewData["SortBy"]?.ToString() == "price_desc")">Price (High to Low)</option>
                    </select>
                </div>
            </div>

            <!-- Book Grid -->
            @if (Model.Any())
            {
                <div class="row row-cols-2 row-cols-md-3 row-cols-xl-4 g-4">
                    @foreach (var book in Model)
                    {
                        <div class="col">
                            @{
                                ViewData["HorizontalLayout"] = false;
                                ViewData["ShowAdminControls"] = false;
                            }
                            <partial name="_BookCard" model="book" view-data="ViewData" />
                        </div>
                    }
                </div>
                
                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <nav class="mt-4" aria-label="Book pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", "Shop", new { page = currentPage - 1, searchTerm = ViewData["SearchTerm"], genre = ViewData["SelectedGenre"], format = ViewData["SelectedFormat"], minPrice = ViewData["MinPrice"], maxPrice = ViewData["MaxPrice"], sortBy = ViewData["SortBy"], category = ViewData["Category"] })">
                                    Previous
                                </a>
                            </li>
                            
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", "Shop", new { page = i, searchTerm = ViewData["SearchTerm"], genre = ViewData["SelectedGenre"], format = ViewData["SelectedFormat"], minPrice = ViewData["MinPrice"], maxPrice = ViewData["MaxPrice"], sortBy = ViewData["SortBy"], category = ViewData["Category"] })">
                                        @i
                                    </a>
                                </li>
                            }
                            
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", "Shop", new { page = currentPage + 1, searchTerm = ViewData["SearchTerm"], genre = ViewData["SelectedGenre"], format = ViewData["SelectedFormat"], minPrice = ViewData["MinPrice"], maxPrice = ViewData["MaxPrice"], sortBy = ViewData["SortBy"], category = ViewData["Category"] })">
                                    Next
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="alert alert-info">
                    <p class="mb-0">
                        @if (ViewData["SearchTerm"] != null || ViewData["SelectedGenre"] != null || ViewData["SelectedFormat"] != null || 
                            ViewData["MinPrice"] != null || ViewData["MaxPrice"] != null || ViewData["InStock"] != null)
                        {
                            <span>No books match your filter criteria. <a href="@Url.Action("Index", "Shop", new { category = ViewData["Category"] })">Clear filters</a> to see all books.</span>
                        }
                        else
                        {
                            <span>No books have been added to our catalog yet. Please check back soon!</span>
                        }
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function updateSort(sortValue) {
            // Get current URL
            var url = new URL(window.location.href);
            
            // Update or add sort parameter
            url.searchParams.set('sortBy', sortValue);
            
            // Redirect to new URL
            window.location.href = url.toString();
        }
    </script>
}