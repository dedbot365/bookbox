@model IEnumerable<Bookbox.Models.Book>
@inject Bookbox.Services.Interfaces.IDiscountService DiscountService
@inject Bookbox.Services.Interfaces.IBookmarkService BookmarkService

@{
    ViewData["Title"] = "My Wishlist";
    int currentPage = ViewData["CurrentPage"] != null ? Convert.ToInt32(ViewData["CurrentPage"]) : 1;
    int totalPages = ViewData["TotalPages"] != null ? Convert.ToInt32(ViewData["TotalPages"]) : 1;
    int totalItems = ViewData["TotalItems"] != null ? Convert.ToInt32(ViewData["TotalItems"]) : 0;
    
    var bookmarkDates = ViewData["BookmarkDates"] as Dictionary<Guid, DateTime>;
    
    // Create parameters for sidebar partial with all required keys
    var sidebarParams = new Dictionary<string, object>
    {
        { "Controller", "Bookmark" },
        { "Category", ViewData["Category"] ?? string.Empty },  // Add this line with default empty string
        { "SortBy", ViewData["SortBy"] },
        { "SearchTerm", ViewData["SearchTerm"] },
        { "SelectedGenre", ViewData["SelectedGenre"] },
        { "SelectedFormat", ViewData["SelectedFormat"] },
        { "MinPrice", ViewData["MinPrice"] },
        { "MaxPrice", ViewData["MaxPrice"] },
        { "InStock", ViewData["InStock"] ?? false }
    };
}

<div class="container-fluid mt-4 mb-5">
    <div class="row">
        <!-- Left Sidebar with Filters -->
        <div class="col-lg-3">
            <partial name="_FilterSidebar" model="sidebarParams" />
        </div>
        
        <!-- Main Content Area -->
        <div class="col-lg-9">
            <!-- Results Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">My Wishlist</h1>
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show mt-2" role="alert">
                            @TempData["SuccessMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show mt-2" role="alert">
                            @TempData["ErrorMessage"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>
                    }
                    <p class="text-muted">
                        Showing @totalItems book@(totalItems != 1 ? "s" : "")
                        @if (!string.IsNullOrEmpty(ViewData["SearchTerm"]?.ToString()))
                        {
                            <span>for "<strong>@ViewData["SearchTerm"]</strong>"</span>
                        }
                    </p>
                </div>
                <div class="d-flex align-items-center">
                    <label for="sortBy" class="me-2">Sort by:</label>
                    <select id="sortBy" name="sortBy" class="form-select" style="width: auto;" onchange="updateSort(this.value)">
                        <option value="newest" selected="@(ViewData["SortBy"]?.ToString() == "newest")">Recently Added</option>
                        <option value="title" selected="@(ViewData["SortBy"]?.ToString() == "title")">Title (A-Z)</option>
                        <option value="price_asc" selected="@(ViewData["SortBy"]?.ToString() == "price_asc")">Price (Low to High)</option>
                        <option value="price_desc" selected="@(ViewData["SortBy"]?.ToString() == "price_desc")">Price (High to Low)</option>
                    </select>
                </div>
            </div>

            <!-- Books Grid -->
            @if (Model != null && Model.Any())
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var book in Model)
                    {
                        <div class="col">
                            <div class="card h-100 book-card">
                                <div class="card-img-container position-relative">
                                    <a href="@Url.Action("Details", "Book", new { id = book.BookId })">
                                        @if (!string.IsNullOrEmpty(book.ImageUrl))
                                        {
                                            <img src="@book.ImageUrl" class="card-img-top" alt="@book.Title">
                                        }
                                        else
                                        {
                                            <div class="placeholder-image">
                                                <i class="fas fa-book fa-4x text-secondary"></i>
                                            </div>
                                        }
                                    </a>
                                    @{
                                        var bookDiscount = await DiscountService.GetActiveDiscountForBookAsync(book.BookId);
                                        if (bookDiscount != null)
                                        {
                                            <div class="position-absolute top-0 end-0">
                                                <span class="badge bg-danger">SALE</span>
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="card-body">
                                    <a href="@Url.Action("Details", "Book", new { id = book.BookId })" class="text-decoration-none text-dark">
                                        <h5 class="card-title book-title">@book.Title</h5>
                                        <p class="card-text book-author">by @book.Author</p>
                                        <p class="card-text mb-0">
                                            <span class="badge bg-secondary">@book.Genre</span>
                                            <span class="badge bg-info">@book.Format</span>
                                        </p>
                                        <div class="d-flex justify-content-between align-items-center mt-2">
                                            @{
                                                var discountedPrice = bookDiscount != null ? 
                                                    DiscountService.CalculateDiscountedPrice(book.Price, bookDiscount.DiscountPercentage) : book.Price;
                                            }
                                            @if (bookDiscount != null)
                                            {
                                                <div>
                                                    <span class="text-muted"><s>NPR @book.Price.ToString("0.00")</s></span>
                                                    <span class="book-price text-danger">NPR @discountedPrice.ToString("0.00")</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="book-price">NPR @book.Price.ToString("0.00")</span>
                                            }
                                            <span class="badge @(book.Stock > 0 ? "bg-success" : "bg-danger")">
                                                @(book.Stock > 0 ? "In Stock" : "Out of Stock")
                                            </span>
                                        </div>
                                    </a>
                                    @if (bookmarkDates != null && bookmarkDates.ContainsKey(book.BookId))
                                    {
                                        <div class="mt-1 small text-muted">
                                            Added on: @TimeZoneInfo.ConvertTimeFromUtc(bookmarkDates[book.BookId], 
                                                TimeZoneInfo.FindSystemTimeZoneById("Asia/Kathmandu")).ToString("MMM dd, yyyy")
                                        </div>
                                    }
                                </div>
                                <div class="card-footer bg-white border-top-0">
                                    <div class="d-grid gap-2">
                                        <form asp-action="Remove" asp-controller="Bookmark" asp-route-id="@book.BookId" 
                                              asp-route-returnUrl="@Context.Request.Path@Context.Request.QueryString" method="post">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" class="btn btn-danger w-100">
                                                <i class="fas fa-heart-broken me-1"></i> Remove from Wishlist
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <nav class="mt-4" aria-label="Book pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", "Bookmark", new { page = currentPage - 1, searchTerm = ViewData["SearchTerm"], genre = ViewData["SelectedGenre"], format = ViewData["SelectedFormat"], minPrice = ViewData["MinPrice"], maxPrice = ViewData["MaxPrice"], sortBy = ViewData["SortBy"] })">
                                    Previous
                                </a>
                            </li>
                            
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", "Bookmark", new { page = i, searchTerm = ViewData["SearchTerm"], genre = ViewData["SelectedGenre"], format = ViewData["SelectedFormat"], minPrice = ViewData["MinPrice"], maxPrice = ViewData["MaxPrice"], sortBy = ViewData["SortBy"] })">
                                        @i
                                    </a>
                                </li>
                            }
                            
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", "Bookmark", new { page = currentPage + 1, searchTerm = ViewData["SearchTerm"], genre = ViewData["SelectedGenre"], format = ViewData["SelectedFormat"], minPrice = ViewData["MinPrice"], maxPrice = ViewData["MaxPrice"], sortBy = ViewData["SortBy"] })">
                                    Next
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="alert alert-info">
                    <p class="mb-0">
                        You haven't added any books to your wishlist yet. Browse the <a href="@Url.Action("Index", "Shop")">shop</a> to find books to add.
                    </p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function updateSort(sortValue) {
            // Get current URL
            var url = new URL(window.location.href);
            
            // Update or add sort parameter
            url.searchParams.set('sortBy', sortValue);
            
            // Redirect to new URL
            window.location.href = url.toString();
        }
    </script>
}