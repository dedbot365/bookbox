@{
    ViewData["Title"] = "Admin Dashboard";
}

<!-- Include Chart.js library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container-fluid">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Dashboard</h1>
    </div>

    <!-- Key Stats Cards - First Row -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Users</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@ViewBag.TotalUsers</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-users fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Total Books</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@ViewBag.TotalBooks</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-book fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Announcements</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@ViewBag.TotalAnnouncements</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-bullhorn fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                Total Orders</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@ViewBag.TotalOrders</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-shopping-cart fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Key Stats Cards - Second Row -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Monthly Revenue</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">NPR @ViewBag.MonthlyRevenue.ToString("N0")</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Additional metrics can be added here if needed -->
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <!-- Orders Line Chart -->
        <div class="col-lg-8">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Orders Overview</h6>
                    <div class="dropdown no-arrow">
                        <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
                           data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                             aria-labelledby="dropdownMenuLink">
                            <div class="dropdown-header">View Options:</div>
                            <a class="dropdown-item timeframe-option active" href="#" data-timeframe="daily">Daily</a>
                            <a class="dropdown-item timeframe-option" href="#" data-timeframe="weekly">Weekly</a>
                            <a class="dropdown-item timeframe-option" href="#" data-timeframe="monthly">Monthly</a>
                            <a class="dropdown-item timeframe-option" href="#" data-timeframe="yearly">Yearly</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="ordersLineChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Books by Genre Pie Chart -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Books by Genre</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="genrePieChart"></canvas>
                    </div>
                    <div class="mt-4 text-center small" id="genre-legend">
                        <!-- Genre legend will be populated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Top Selling Books -->
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Top Selling Books</h6>
                </div>
                <div class="card-body">
                    <div class="chart-bar">
                        <canvas id="topSellingBooksChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Books by Format -->
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Books by Format</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie">
                        <canvas id="formatDonutChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Content Row -->
    <div class="row">
        <!-- Reviews Overview -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Reviews Overview</h6>
                </div>
                <div class="card-body">
                    @{
                        var reviewPercentages = ViewBag.ReviewPercentages as Dictionary<int, int> ?? new Dictionary<int, int>();
                        string[] progressClasses = { "bg-danger", "bg-danger", "bg-warning", "bg-info", "bg-success" };
                    }
                    
                    @for (int i = 5; i >= 1; i--)
                    {
                        var percentage = reviewPercentages.ContainsKey(i) ? reviewPercentages[i] : 0;
                        var progressClass = progressClasses[i - 1];
                        
                        <h4 class="small font-weight-bold">@i Stars <span class="float-end">@percentage%</span></h4>
                        <div class="progress mb-4">
                            <div class="progress-bar @progressClass" role="progressbar" style="width: @percentage%" 
                                 aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Recent Announcements -->
        <div class="col-lg-6 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Announcements</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-borderless" id="dataTable" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Title</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var announcement in ViewBag.Announcements ?? new List<Bookbox.Models.Announcement>())
                                {
                                    <tr>
                                        <td>@announcement.Title</td>
                                        <td>
                                            @if (announcement.IsActive && announcement.StartDate <= DateTime.UtcNow && (announcement.EndDate == null || announcement.EndDate > DateTime.UtcNow))
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else if (announcement.IsActive && announcement.StartDate > DateTime.UtcNow)
                                            {
                                                <span class="badge bg-warning">Scheduled</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Inactive</span>
                                            }
                                        </td>
                                        <td>@announcement.LastModified.ToString("MMM dd")</td>
                                    </tr>
                                }
                                @if ((ViewBag.Announcements as IEnumerable<Bookbox.Models.Announcement>)?.Any() != true)
                                {
                                    <tr>
                                        <td colspan="3" class="text-center">No recent announcements</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Orders and Activity Row -->
    <div class="row">
        <!-- Recent Orders -->
        <div class="col-lg-7 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Recent Orders</h6>
                    <a href="#" class="btn btn-sm btn-primary shadow-sm">View All</a>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th>Order ID</th>
                                    <th>Customer</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in ViewBag.RecentCompletedOrders ?? new List<dynamic>())
                                {
                                    <tr>
                                        <td>#ORD-@order.OrderNumber</td>
                                        <td>@order.CustomerName</td>
                                        <td>NPR @order.Amount.ToString("N0")</td>
                                        <td><span class="badge bg-success">Completed</span></td>
                                        <td>@order.CompletedDate.ToString("MMM dd, yyyy")</td>
                                    </tr>
                                }
                                @if ((ViewBag.RecentCompletedOrders as IEnumerable<dynamic>)?.Any() != true)
                                {
                                    <tr>
                                        <td colspan="5" class="text-center">No completed orders found</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Custom styling for dashboard */
.border-left-primary {
    border-left: 0.25rem solid #4e73df !important;
}
.border-left-success {
    border-left: 0.25rem solid #1cc88a !important;
}
.border-left-info {
    border-left: 0.25rem solid #36b9cc !important;
}
.border-left-warning {
    border-left: 0.25rem solid #f6c23e !important;
}

/* Timeline styling */
.timeline {
    position: relative;
    list-style: none;
    padding-left: 0;
}

.timeline-item {
    position: relative;
    padding-left: 40px;
    margin-bottom: 20px;
}

.timeline-icon {
    position: absolute;
    left: 0;
    top: 0;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.timeline-content {
    border-left: 2px solid #e3e6f0;
    padding-left: 15px;
    padding-bottom: 10px;
}
</style>

@section Scripts {
    <script>
        // Execute charts when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // ==================== ORDERS CHART WITH TIME PERIOD SWITCHING ====================
            const ordersCtx = document.getElementById('ordersLineChart').getContext('2d');
            
            // Prepare data sets for different time periods
            const orderData = {
                daily: @Html.Raw(Json.Serialize(ViewBag.DailyOrderCounts ?? new int[7])),
                weekly: @Html.Raw(Json.Serialize(ViewBag.WeeklyOrderCounts ?? new int[4])),
                monthly: @Html.Raw(Json.Serialize(ViewBag.MonthlyOrderCounts ?? new int[12])),
                yearly: @Html.Raw(Json.Serialize(ViewBag.YearlyOrderCounts ?? new int[5]))
            };

            // Add this debugging code right after your orderData initialization

            console.log("Debug - All order data:", {
                daily: orderData.daily,
                weekly: orderData.weekly,
                monthly: orderData.monthly,
                yearly: orderData.yearly
            });

            // Labels for different time periods
            const timeframeLabels = {
                daily: Array.from({length: 7}, (_, i) => {
                    const d = new Date(); 
                    d.setDate(d.getDate() - (6-i));
                    return d.toLocaleDateString('en-US', {month: 'short', day: 'numeric'});
                }),
                weekly: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                monthly: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                yearly: Array.from({length: 5}, (_, i) => `${new Date().getFullYear() - 4 + i}`)
            };
            
            // Update the timeframeLabels for weekly to make them more descriptive
            timeframeLabels.weekly = [
                "Week 1 (Most Recent)", 
                "Week 2", 
                "Week 3", 
                "Week 4 (Oldest)"
            ];

            // Create the orders chart (initially with daily data)
            const ordersLineChart = new Chart(ordersCtx, {
                type: 'line',
                data: {
                    labels: timeframeLabels.daily,
                    datasets: [{
                        label: 'Orders',
                        lineTension: 0.3,
                        backgroundColor: 'rgba(78, 115, 223, 0.05)',
                        borderColor: 'rgba(78, 115, 223, 1)',
                        pointRadius: 3,
                        pointBackgroundColor: 'rgba(78, 115, 223, 1)',
                        pointBorderColor: 'rgba(78, 115, 223, 1)',
                        pointHoverRadius: 3,
                        pointHoverBackgroundColor: 'rgba(78, 115, 223, 1)',
                        pointHoverBorderColor: 'rgba(78, 115, 223, 1)',
                        pointHitRadius: 10,
                        pointBorderWidth: 2,
                        data: orderData.daily,
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    layout: {
                        padding: {
                            left: 10,
                            right: 25,
                            top: 25,
                            bottom: 0
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false,
                                drawBorder: false
                            }
                        },
                        y: {
                            ticks: {
                                maxTicksLimit: 5,
                                padding: 10
                            },
                            grid: {
                                color: 'rgb(234, 236, 244)',
                                drawBorder: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
            
            // Function to update chart based on selected timeframe
            function updateOrderChart(timeframe) {
                console.log("Updating chart to:", timeframe);
                
                if (!orderData[timeframe]) {
                    console.error("No data found for timeframe:", timeframe);
                    return;
                }
                
                ordersLineChart.data.labels = timeframeLabels[timeframe];
                ordersLineChart.data.datasets[0].data = orderData[timeframe];
                
                // Update chart title to reflect the current view
                const cardHeader = document.querySelector('.card-header h6');
                if (cardHeader) {
                    const viewNames = {
                        'daily': 'Daily (Last 7 Days)',
                        'weekly': 'Weekly (Last 4 Weeks)',
                        'monthly': 'Monthly (This Year)',
                        'yearly': 'Yearly (Last 5 Years)'
                    };
                    cardHeader.textContent = `Orders Overview - ${viewNames[timeframe] || timeframe}`;
                }
                
                ordersLineChart.update();
            }
            
            // Add click handlers to timeframe options
            document.querySelectorAll('.timeframe-option').forEach(option => {
                option.addEventListener('click', function(e) {
                    e.preventDefault();
                    // Update the active class
                    document.querySelectorAll('.timeframe-option').forEach(opt => 
                        opt.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update the chart with the selected timeframe
                    updateOrderChart(this.getAttribute('data-timeframe'));
                });
            });
            
            // Initialize with daily view
            document.querySelector('.timeframe-option[data-timeframe="daily"]').classList.add('active');
            updateOrderChart('daily');

            // ==================== GENRE PIE CHART ====================
            const genreCtx = document.getElementById('genrePieChart').getContext('2d');
            
            // Get genre data from ViewBag
            const genreData = @Html.Raw(Json.Serialize(ViewBag.BooksByGenre ?? new List<object>()));

            // Extract labels and data from genreData
            const genreLabels = genreData.map(item => item.genre);
            const genreCounts = genreData.map(item => item.count);

            // Define colors for the chart
            const backgroundColors = ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b', '#858796', 
                                     '#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#be2617', '#60616f'];
            const hoverBackgroundColors = ['#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#be2617', '#60616f',
                                          '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b', '#858796'];

            // Create the genre pie chart
            const genrePieChart = new Chart(genreCtx, {
                type: 'doughnut',
                data: {
                    labels: genreLabels,
                    datasets: [{
                        data: genreCounts,
                        backgroundColor: backgroundColors.slice(0, genreLabels.length),
                        hoverBackgroundColor: hoverBackgroundColors.slice(0, genreLabels.length),
                        hoverBorderColor: 'rgba(234, 236, 244, 1)',
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            display: genreLabels.length <= 8
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '60%',
                }
            });

            // Update the small legend below the chart
            const legendContainer = document.getElementById('genre-legend');
            if (legendContainer) {
                legendContainer.innerHTML = genreLabels.slice(0, 5).map((label, index) => {
                    return `<span class="mr-2"><i class="fas fa-circle" style="color: ${backgroundColors[index]}"></i> ${label}</span>`;
                }).join('');
            }

            // ==================== TOP SELLING BOOKS CHART ====================
            const topBooksCtx = document.getElementById('topSellingBooksChart').getContext('2d');
            const topSellingData = @Html.Raw(Json.Serialize(ViewBag.TopSellingBooks ?? new List<object>()));
            const bookLabels = topSellingData.map(item => item.title);
            const salesCounts = topSellingData.map(item => item.salesCount);

            const topBooksChart = new Chart(topBooksCtx, {
                type: 'bar',
                data: {
                    labels: bookLabels,
                    datasets: [{
                        label: 'Sales',
                        backgroundColor: '#4e73df',
                        hoverBackgroundColor: '#2e59d9',
                        data: salesCounts,
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            grid: {
                                display: false,
                                drawBorder: false
                            }
                        },
                        y: {
                            ticks: {
                                maxTicksLimit: 5,
                                padding: 10
                            },
                            grid: {
                                color: 'rgb(234, 236, 244)',
                                drawBorder: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });

            // ==================== BOOKS BY FORMAT CHART ====================
            const formatCtx = document.getElementById('formatDonutChart').getContext('2d');

            // Get format data from ViewBag
            const formatData = @Html.Raw(Json.Serialize(ViewBag.BooksByFormat ?? new List<object>()));

            // Extract labels and data from formatData
            const formatLabels = formatData.map(item => item.format);
            const formatCounts = formatData.map(item => item.count);

            // Create the format donut chart
            const formatDonutChart = new Chart(formatCtx, {
                type: 'doughnut',
                data: {
                    labels: formatLabels,
                    datasets: [{
                        data: formatCounts,
                        backgroundColor: backgroundColors.slice(0, formatLabels.length),
                        hoverBackgroundColor: hoverBackgroundColors.slice(0, formatLabels.length),
                        hoverBorderColor: 'rgba(234, 236, 244, 1)',
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            display: formatLabels.length <= 8
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw;
                                    const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '60%',
                }
            });
        });
    </script>
}