@inject Bookbox.Services.Interfaces.IDiscountService DiscountService
@using System.Security.Claims

<li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" href="#" id="bookmarkDropdown" role="button" 
       data-bs-toggle="dropdown" aria-expanded="false">
        <i class="fas fa-heart me-1"></i> Wishlist
    </a>
    <div class="dropdown-menu dropdown-menu-end p-0" aria-labelledby="bookmarkDropdown" style="min-width: 320px;">
        <div class="card border-0">
            <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
                <span>My Wishlist</span>
                <a href="@Url.Action("Index", "Bookmark")" class="btn btn-sm btn-outline-light">View All</a>
            </div>
            <div class="card-body p-0" id="bookmarkDropdownContent">
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</li>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const bookmarkDropdown = document.getElementById('bookmarkDropdown');
        let bookmarksLoaded = false;
        
        bookmarkDropdown.addEventListener('shown.bs.dropdown', function() {
            if (!bookmarksLoaded) {
                fetchBookmarks();
                bookmarksLoaded = true;
            }
        });
        
        function fetchBookmarks() {
            fetch('@Url.Action("GetRecentBookmarks", "Bookmark", new { count = 5 })')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    renderBookmarks(data);
                })
                .catch(error => {
                    console.error('Error fetching bookmarks:', error);
                    document.getElementById('bookmarkDropdownContent').innerHTML = 
                        '<div class="p-3 text-center text-danger">Failed to load wishlist items</div>';
                });
        }
        
        function renderBookmarks(bookmarks) {
            const container = document.getElementById('bookmarkDropdownContent');
            
            if (!bookmarks || bookmarks.length === 0) {
                container.innerHTML = '<div class="p-3 text-center">Your wishlist is empty</div>';
                return;
            }
            
            let html = '<ul class="list-group list-group-flush">';
            
            bookmarks.forEach(bookmark => {
                const book = bookmark.book;
                const bookUrl = '@Url.Action("Details", "Book")/' + book.bookId;
                const imageUrl = book.imageUrl || '/images/placeholder-book.png';
                
                html += `
                <li class="list-group-item p-2">
                    <div class="d-flex">
                        <div class="flex-shrink-0" style="width: 50px;">
                            <a href="${bookUrl}">
                                <img src="${imageUrl}" alt="${book.title}" class="img-fluid rounded" style="max-height: 70px;">
                            </a>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="mb-0"><a href="${bookUrl}" class="text-dark">${book.title}</a></h6>
                            <small class="text-muted">${book.author}</small>
                            <div class="mt-1">`;
                
                if (book.isOnSale && book.discountedPrice) {
                    html += `
                                <span class="text-muted"><s>NPR ${book.price.toFixed(2)}</s></span>
                                <span class="text-danger">NPR ${book.discountedPrice.toFixed(2)}</span>
                                <span class="badge bg-danger ms-1">SALE</span>`;
                } else {
                    html += `<span class="fw-bold">NPR ${book.price.toFixed(2)}</span>`;
                }
                
                html += `
                            </div>
                        </div>
                    </div>
                </li>`;
            });
            
            html += '</ul>';
            container.innerHTML = html;
        }
    });
</script>